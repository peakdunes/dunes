<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - DUNES</title>
    <script type="importmap"></script>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/DUNES.styles.css" asp-append-version="true" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">

    <style>
        .custom-footer {
            background-color: #f8f9fa; /* Gris claro */
            padding: 20px 0; /* Lo hace más alto */
            border-top: 1px solid #ddd; /* Línea superior sutil */
            font-size: 15px;
            color: #555; /* Texto gris oscuro */
        }

            .custom-footer a {
                color: #007bff; /* Azul Bootstrap */
                text-decoration: none;
                transition: color 0.2s ease;
            }

                .custom-footer a:hover {
                    color: #0056b3; /* Azul más oscuro al pasar mouse */
                    text-decoration: underline;
                }

    </style>

</head>
<body class="d-flex flex-column min-vh-100">
    <div class="flex-grow-1">
        <header>
            <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
                <div class="container-fluid">


                    <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">DUNES</a>



                    <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                        <ul class="navbar-nav flex-grow-1">
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
                            </li>
                        </ul>
                        <!-- Zona de Login/Logout -->
                        <ul class="navbar-nav">
                            @if (Context.Session.GetString("JWToken") == null)
                            {
                                <!--  Si NO hay token → mostrar Login -->
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-controller="Auth" asp-action="Login">Login</a>
                                </li>
                            }
                            else
                            {
                                <!--  Si hay token → mostrar Logout -->
                                <li class="nav-item">
                                    <form asp-controller="Auth" asp-action="Logout" method="post" class="d-inline">
                                        <button type="submit" class="btn btn-link nav-link text-dark">Logout</button>
                                    </form>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            </nav>
        </header>



        <div class="container">
            <main role="main" class="pb-3">
                @await Html.PartialAsync("_UIMsg")   <!-- UI Mensajes globales aquí -->
                @RenderBody()
            </main>
        </div>
    </div>
    <footer class="custom-footer mt-auto">
        <div class="container text-center">
            &copy; 2025 - DUNES - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>

    <!--######################################################################################## -->
    <!--scripts section                                                                          -->
    <!--######################################################################################## -->


    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

    <!--######################################################################################## -->
    <!--fin scripts section                                                                          -->
    <!--######################################################################################## -->




    <!--######################################################################################## -->
    <!--alerta global muestra un modal con una informacion importante para todos                 -->
    <!--######################################################################################## -->

    <div class="modal fade" id="globalAlertModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">⚠️ Alert</h5>
                </div>
                <div class="modal-body" id="globalAlertBody">
                    <!-- Mensaje dinámico se insertará aquí -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" id="globalAlertAcceptBtn" data-bs-dismiss="modal">
                        OK
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // ✅ Función global para mostrar la alerta
        function showGlobalAlert(message, callback) {
            document.getElementById('globalAlertBody').innerText = message;

            // Mostrar modal
            const modal = new bootstrap.Modal(document.getElementById('globalAlertModal'), {
                backdrop: 'static',  // bloquea la UI hasta que cierren
                keyboard: false      // evita cerrar con ESC
            });
            modal.show();

            // ✅ callback opcional si se requiere hacer algo cuando acepten
            document.getElementById('globalAlertAcceptBtn').onclick = function () {
                modal.hide();
                if (callback) callback();
            };
        }
    </script>

    @if (ViewBag.GlobalAlert != null)
    {
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                showGlobalAlert(@Html.Raw(Json.Serialize(ViewBag.GlobalAlert)));

            });
        </script>
    }
    
    
    
    <!--######################################################################################## -->
    <!--FIN alerta global                                                                        -->
    <!--######################################################################################## -->


    <!--######################################################################################## -->
    <!--spinner                                                                                  -->
    <!--######################################################################################## -->
    @await Html.PartialAsync("_Spinner")

    <script>
        function showSpinner() {
            document.getElementById('globalSpinner').style.display = 'flex';
        }

        function hideSpinner() {
            document.getElementById('globalSpinner').style.display = 'none';
        }
    </script>
    <!--######################################################################################## -->
    <!--FIN spinner                                                                                  -->
    <!--######################################################################################## -->





    <!--######################################################################################## -->
    <!--Función global para mostrar toasts, si ViewBag.ApiMessage no es vacia muestra el mensaje -->
    <!--######################################################################################## -->
    <!-- 📌 Toast Container -->
    <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1100;">
    </div>


    @if (ViewBag.ApiMessage != null)
    {
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                showToast("@ViewBag.ApiType", "@ViewBag.ApiMessage");
            });
        </script>
    }
    <script>
        //Pegar esto donde se quiera mostrar el mensaje
           // ViewBag.ApiMessage = "mensaje que se quiere mostrar";
           //  ViewBag.ApiType = tipo de mensaje para el color ejemplo "success" o "danger";

        function showToast(type, message) {
            // Mapear colores Bootstrap según el tipo de mensaje
            let bgClass = "text-bg-primary";
            if (type === "success") bgClass = "text-bg-success";
            if (type === "danger" || type === "error") bgClass = "text-bg-danger";
            if (type === "warning") bgClass = "text-bg-warning";
            if (type === "info") bgClass = "text-bg-info";

            // Crear el HTML del toast dinámicamente
            const toastHTML = `
                <div class="toast align-items-center ${bgClass} border-0 mb-2" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="d-flex">
                        <div class="toast-body">${message}</div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>`;

            // Insertar el toast en el contenedor
            const container = document.querySelector('.toast-container');
            container.insertAdjacentHTML('beforeend', toastHTML);

            // Inicializar y mostrar toast con Bootstrap
            const toastElement = container.lastElementChild;
            const bsToast = new bootstrap.Toast(toastElement, { delay: 4000 });
            bsToast.show();

            // Eliminar el toast del DOM cuando se oculta
            toastElement.addEventListener('hidden.bs.toast', () => toastElement.remove());
        }
    </script>
    <!--######################################################################################## -->
    <!--FIN Función global                                                                       -->
    <!--######################################################################################## -->
    @await RenderSectionAsync("Scripts", required: false)



</body>
</html>
